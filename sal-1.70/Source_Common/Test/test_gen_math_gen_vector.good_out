Testing Gen_Math.Gen_Vector

Any ((True, False, False))  => TRUE
Any ((False, False, False)) => FALSE
Any ((True, True, True))    => TRUE

- (1.0, 2.0, 3.0) => ( -1.00000,  -2.00000,  -3.00000)
abs (-1.0, 2.0, -3.0) => (  1.00000,   2.00000,   3.00000)
(-1.0, 2.0, -3.0) + (-1.0, 2.0, -3.0) => ( -2.00000,   4.00000,  -6.00000)
(-1.0, 2.0, -3.0) - (-1.0, 2.0, -3.0) => (  0.00000,   0.00000,   0.00000)
(-1.0, 2.0, -3.0) * (-1.0, 2.0, -3.0) => (  1.00000,   4.00000,   9.00000)
(-1.0, 2.0, -3.0) / (-1.0, 2.0, -3.0) => (  1.00000,   1.00000,   1.00000)
(-1.0, 2.0, -3.0) + 3.0  => (  2.00000,   5.00000,   0.00000)
(-1.0, 2.0, -3.0) - 3.0  => ( -4.00000,  -1.00000,  -6.00000)
(-1.0, 2.0, -3.0) * 3.0  => ( -3.00000,   6.00000,  -9.00000)
(-1.0, 2.0, -3.0) / 3.0  => ( -0.33333,   0.66667,  -1.00000)
3.0 + (-1.0, 2.0, -3.0) => (  2.00000,   5.00000,   0.00000)
3.0 - (-1.0, 2.0, -3.0) => (  4.00000,   1.00000,   6.00000)
3.0 * (-1.0, 2.0, -3.0) => ( -3.00000,   6.00000,  -9.00000)
3.0 / (-1.0, 2.0, -3.0) => ( -3.00000,   1.50000,  -1.00000)
(-1.0, 2.0, -3.0) * (-1.0, 2.0, -3.0) =>  14.00000

Mask ((-1.0,  2.0, -3.0), (True, False, True)) => (  0.00000,   2.00000,   0.00000)

Dead_Band
    (Item =>        (-1.0,  2.0, -3.0),
     Lower_Limit => ( 2.0,  0.5,  0.5)) => 
(  0.00000,   1.50000,  -2.50000)

Detent
    (Item =>        (-1.0,  2.0, -3.0),
     Dead_Band   => ( 2.0,  0.5,  0.5),
     Upper_Limit => ( 3.0,  2.5,  2.5));
(  0.00000,   0.75000,  -1.00000)

To_Limit
    (Low  =>  (-2.0, -2.0, -1.0),
     High =>  ( 1.0,  2.0,  3.0));
(( -2.00000,  1.00000), ( -2.00000,  2.00000), ( -1.00000,  3.00000))

and
    (Left =>  ((-1.0, 1.0), (-2.0, 2.0), (-3.0, 3.0)),
     Right => ((-2.0, 1.0), (-2.0, 3.0), (-1.0, 1.0))));
(( -1.00000,  1.00000), ( -2.00000,  2.00000), ( -1.00000,  1.00000))

Clip
    (Item  => ( -1.00000,   2.00000,  -3.00000)
     Limit => (( -1.00000,  1.00000), ( -1.00000,  1.00000), ( -1.00000,  1.00000))
Item    => ( -1.00000,   1.00000,  -1.00000)
Clipped => (FALSE, TRUE , TRUE )

 <=
( -1.00000,   2.00000,  -3.00000) <= (( -1.00000,  1.00000), ( -1.00000,  1.00000), ( -1.00000,  1.00000)) => FALSE

Scale_Limit
Item  => ( -1.00000,   2.00000,  -3.00000)
Limit =>  -1.00000
Item   => ( -0.33333,   0.66667,  -1.00000)
Scaled => TRUE

Item  => ( -1.00000,   2.00000,  -3.00000)
Limit =>   4.00000
Item   => ( -1.00000,   2.00000,  -3.00000)
Scaled => FALSE

