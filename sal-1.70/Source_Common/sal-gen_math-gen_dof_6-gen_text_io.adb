--  Abstract :
--
--  See spec. This file is auto-generated by auto_text_io
--  from SAL.Gen_Math.Gen_DOF_6
--
with SAL.Text_IO_Utils; use SAL.Text_IO_Utils;
package body SAL.Gen_Math.Gen_DOF_6.Gen_Text_IO is

   use Ada.Text_IO;

   procedure Put
      (File                        : in Ada.Text_IO.File_Type;
       Item                        : in Pose_Type;
       Single_Line_Record          : in Boolean := True;
       Named_Association_Record    : in Boolean := False;
       Single_Line_Component       : in Boolean := True;
       Named_Association_Component : in Boolean := False)
   is
   begin
      Put (File, "(");
      if Named_Association_Record then
         Put (File, "Translation => ");
         if not Single_Line_Component then New_Line (File); end if;
      end if;
      Math_DOF_3_Text_IO.Put_Item (File, Item.Translation,
         Single_Line => Single_Line_Component, Named_Association => Named_Association_Component);
      Put (File, ','); if not Single_Line_Record then New_Line (File); end if;
      Put (File, ' ');
      if Named_Association_Record then
         Put (File, "Rotation => ");
         if not Single_Line_Component then New_Line (File); end if;
      end if;
      Math_DOF_3_Text_IO.Put_Item (File, Item.Rotation,
         Single_Line => Single_Line_Component, Named_Association => Named_Association_Component);
      Put (File, ")");
   end Put;

   procedure Put
      (Item                        : in Pose_Type;
       Single_Line_Record          : in Boolean := True;
       Named_Association_Record    : in Boolean := False;
       Single_Line_Component       : in Boolean := True;
       Named_Association_Component : in Boolean := False)
   is
   begin
      Put (Current_Output, Item, Single_Line_Record, Named_Association_Record,
           Single_Line_Component, Named_Association_Component);
   end Put;

   procedure Put_Item
      (File                        : in Ada.Text_IO.File_Type;
       Item                        : in Pose_Type;
       Single_Line                 : in Boolean := False;
       Named_Association           : in Boolean := False)
   is
   begin
      Put (File, Item, Single_Line, Named_Association,
           Single_Line, Named_Association);
   end Put_Item;

   procedure Get
      (File                        : in     Ada.Text_IO.File_Type;
       Item                        :    out Pose_Type;
       Named_Association_Record    : in     Boolean := False;
       Named_Association_Component : in     Boolean := False)
   is
      Temp_Item : Pose_Type renames Item;
   begin
      Check (File, "(");
      if Named_Association_Record then Check (File, "Translation => "); end if;
      Math_DOF_3_Text_IO.
      Get_Item (File, Temp_Item.Translation,
         Named_Association => Named_Association_Component);
      Check (File, ",");
      Skip_Whitespace (File);
      if Named_Association_Record then Check (File, "Rotation => "); end if;
      Math_DOF_3_Text_IO.
      Get_Item (File, Temp_Item.Rotation,
         Named_Association => Named_Association_Component);
      Check (File, ")");
   end Get;

   procedure Get
      (Item                        :    out Pose_Type;
       Named_Association_Record    : in     Boolean := False;
       Named_Association_Component : in     Boolean := False)
   is begin
      Get (Current_Input, Item, Named_Association_Record, Named_Association_Component);
   end Get;

   procedure Get_Item
      (File              : in     Ada.Text_IO.File_Type;
       Item              :    out Pose_Type;
       Named_Association : in     Boolean := False)
   is begin
      Get (File, Item, Named_Association, Named_Association);
   end Get_Item;

   procedure Put
      (File                        : in Ada.Text_IO.File_Type;
       Item                        : in Rate_Transform_Type;
       Single_Line_Record          : in Boolean := True;
       Named_Association_Record    : in Boolean := False;
       Single_Line_Component       : in Boolean := True;
       Named_Association_Component : in Boolean := False)
   is
   begin
      Put (File, "(");
      if Named_Association_Record then
         Put (File, "Rot => ");
         if not Single_Line_Component then New_Line (File); end if;
      end if;
      Math_DOF_3_Text_IO.Put_Item (File, Item.Rot,
         Single_Line => Single_Line_Component, Named_Association => Named_Association_Component);
      Put (File, ','); if not Single_Line_Record then New_Line (File); end if;
      Put (File, ' ');
      if Named_Association_Record then
         Put (File, "Rot_Cross => ");
         if not Single_Line_Component then New_Line (File); end if;
      end if;
      Math_DOF_3_Text_IO.Put_Item (File, Item.Rot_Cross,
         Single_Line => Single_Line_Component, Named_Association => Named_Association_Component);
      Put (File, ")");
   end Put;

   procedure Put
      (Item                        : in Rate_Transform_Type;
       Single_Line_Record          : in Boolean := True;
       Named_Association_Record    : in Boolean := False;
       Single_Line_Component       : in Boolean := True;
       Named_Association_Component : in Boolean := False)
   is
   begin
      Put (Current_Output, Item, Single_Line_Record, Named_Association_Record,
           Single_Line_Component, Named_Association_Component);
   end Put;

   procedure Put_Item
      (File                        : in Ada.Text_IO.File_Type;
       Item                        : in Rate_Transform_Type;
       Single_Line                 : in Boolean := False;
       Named_Association           : in Boolean := False)
   is
   begin
      Put (File, Item, Single_Line, Named_Association,
           Single_Line, Named_Association);
   end Put_Item;

   procedure Get
      (File                        : in     Ada.Text_IO.File_Type;
       Item                        :    out Rate_Transform_Type;
       Named_Association_Record    : in     Boolean := False;
       Named_Association_Component : in     Boolean := False)
   is
      Temp_Item : Rate_Transform_Type renames Item;
   begin
      Check (File, "(");
      if Named_Association_Record then Check (File, "Rot => "); end if;
      Math_DOF_3_Text_IO.
      Get_Item (File, Temp_Item.Rot,
         Named_Association => Named_Association_Component);
      Check (File, ",");
      Skip_Whitespace (File);
      if Named_Association_Record then Check (File, "Rot_Cross => "); end if;
      Math_DOF_3_Text_IO.
      Get_Item (File, Temp_Item.Rot_Cross,
         Named_Association => Named_Association_Component);
      Check (File, ")");
   end Get;

   procedure Get
      (Item                        :    out Rate_Transform_Type;
       Named_Association_Record    : in     Boolean := False;
       Named_Association_Component : in     Boolean := False)
   is begin
      Get (Current_Input, Item, Named_Association_Record, Named_Association_Component);
   end Get;

   procedure Get_Item
      (File              : in     Ada.Text_IO.File_Type;
       Item              :    out Rate_Transform_Type;
       Named_Association : in     Boolean := False)
   is begin
      Get (File, Item, Named_Association, Named_Association);
   end Get_Item;

   procedure Put
      (File                        : in Ada.Text_IO.File_Type;
       Item                        : in Wrench_Transform_Type;
       Single_Line_Record          : in Boolean := True;
       Named_Association_Record    : in Boolean := False;
       Single_Line_Component       : in Boolean := True;
       Named_Association_Component : in Boolean := False)
   is
   begin
      Put (File, "(");
      if Named_Association_Record then
         Put (File, "Rot => ");
         if not Single_Line_Component then New_Line (File); end if;
      end if;
      Math_DOF_3_Text_IO.Put_Item (File, Item.Rot,
         Single_Line => Single_Line_Component, Named_Association => Named_Association_Component);
      Put (File, ','); if not Single_Line_Record then New_Line (File); end if;
      Put (File, ' ');
      if Named_Association_Record then
         Put (File, "Rot_Cross => ");
         if not Single_Line_Component then New_Line (File); end if;
      end if;
      Math_DOF_3_Text_IO.Put_Item (File, Item.Rot_Cross,
         Single_Line => Single_Line_Component, Named_Association => Named_Association_Component);
      Put (File, ")");
   end Put;

   procedure Put
      (Item                        : in Wrench_Transform_Type;
       Single_Line_Record          : in Boolean := True;
       Named_Association_Record    : in Boolean := False;
       Single_Line_Component       : in Boolean := True;
       Named_Association_Component : in Boolean := False)
   is
   begin
      Put (Current_Output, Item, Single_Line_Record, Named_Association_Record,
           Single_Line_Component, Named_Association_Component);
   end Put;

   procedure Put_Item
      (File                        : in Ada.Text_IO.File_Type;
       Item                        : in Wrench_Transform_Type;
       Single_Line                 : in Boolean := False;
       Named_Association           : in Boolean := False)
   is
   begin
      Put (File, Item, Single_Line, Named_Association,
           Single_Line, Named_Association);
   end Put_Item;

   procedure Get
      (File                        : in     Ada.Text_IO.File_Type;
       Item                        :    out Wrench_Transform_Type;
       Named_Association_Record    : in     Boolean := False;
       Named_Association_Component : in     Boolean := False)
   is
      Temp_Item : Wrench_Transform_Type renames Item;
   begin
      Check (File, "(");
      if Named_Association_Record then Check (File, "Rot => "); end if;
      Math_DOF_3_Text_IO.
      Get_Item (File, Temp_Item.Rot,
         Named_Association => Named_Association_Component);
      Check (File, ",");
      Skip_Whitespace (File);
      if Named_Association_Record then Check (File, "Rot_Cross => "); end if;
      Math_DOF_3_Text_IO.
      Get_Item (File, Temp_Item.Rot_Cross,
         Named_Association => Named_Association_Component);
      Check (File, ")");
   end Get;

   procedure Get
      (Item                        :    out Wrench_Transform_Type;
       Named_Association_Record    : in     Boolean := False;
       Named_Association_Component : in     Boolean := False)
   is begin
      Get (Current_Input, Item, Named_Association_Record, Named_Association_Component);
   end Get;

   procedure Get_Item
      (File              : in     Ada.Text_IO.File_Type;
       Item              :    out Wrench_Transform_Type;
       Named_Association : in     Boolean := False)
   is begin
      Get (File, Item, Named_Association, Named_Association);
   end Get_Item;

   procedure Put
      (File                        : in Ada.Text_IO.File_Type;
       Item                        : in Dual_Mag_Axis_Type;
       Single_Line_Record          : in Boolean := True;
       Named_Association_Record    : in Boolean := False;
       Single_Line_Component       : in Boolean := True;
       Named_Association_Component : in Boolean := False)
   is
   begin
      Put (File, "(");
      if Named_Association_Record then
         Put (File, "Translation => ");
         if not Single_Line_Component then New_Line (File); end if;
      end if;
      Math_DOF_3_Text_IO.Put_Item (File, Item.Translation,
         Single_Line => Single_Line_Component, Named_Association => Named_Association_Component);
      Put (File, ','); if not Single_Line_Record then New_Line (File); end if;
      Put (File, ' ');
      if Named_Association_Record then
         Put (File, "Rotation => ");
         if not Single_Line_Component then New_Line (File); end if;
      end if;
      Math_DOF_3_Text_IO.Put_Item (File, Item.Rotation,
         Single_Line => Single_Line_Component, Named_Association => Named_Association_Component);
      Put (File, ")");
   end Put;

   procedure Put
      (Item                        : in Dual_Mag_Axis_Type;
       Single_Line_Record          : in Boolean := True;
       Named_Association_Record    : in Boolean := False;
       Single_Line_Component       : in Boolean := True;
       Named_Association_Component : in Boolean := False)
   is
   begin
      Put (Current_Output, Item, Single_Line_Record, Named_Association_Record,
           Single_Line_Component, Named_Association_Component);
   end Put;

   procedure Put_Item
      (File                        : in Ada.Text_IO.File_Type;
       Item                        : in Dual_Mag_Axis_Type;
       Single_Line                 : in Boolean := False;
       Named_Association           : in Boolean := False)
   is
   begin
      Put (File, Item, Single_Line, Named_Association,
           Single_Line, Named_Association);
   end Put_Item;

   procedure Get
      (File                        : in     Ada.Text_IO.File_Type;
       Item                        :    out Dual_Mag_Axis_Type;
       Named_Association_Record    : in     Boolean := False;
       Named_Association_Component : in     Boolean := False)
   is
      Temp_Item : Dual_Mag_Axis_Type renames Item;
   begin
      Check (File, "(");
      if Named_Association_Record then Check (File, "Translation => "); end if;
      Math_DOF_3_Text_IO.
      Get_Item (File, Temp_Item.Translation,
         Named_Association => Named_Association_Component);
      Check (File, ",");
      Skip_Whitespace (File);
      if Named_Association_Record then Check (File, "Rotation => "); end if;
      Math_DOF_3_Text_IO.
      Get_Item (File, Temp_Item.Rotation,
         Named_Association => Named_Association_Component);
      Check (File, ")");
   end Get;

   procedure Get
      (Item                        :    out Dual_Mag_Axis_Type;
       Named_Association_Record    : in     Boolean := False;
       Named_Association_Component : in     Boolean := False)
   is begin
      Get (Current_Input, Item, Named_Association_Record, Named_Association_Component);
   end Get;

   procedure Get_Item
      (File              : in     Ada.Text_IO.File_Type;
       Item              :    out Dual_Mag_Axis_Type;
       Named_Association : in     Boolean := False)
   is begin
      Get (File, Item, Named_Association, Named_Association);
   end Get_Item;

   procedure Put_Mass
      (File                        : in Ada.Text_IO.File_Type;
       Item                        : in Mass_Type;
       Single_Line_Record          : in Boolean := True;
       Named_Association_Record    : in Boolean := False;
       Single_Line_Component       : in Boolean := True;
       Named_Association_Component : in Boolean := False)
   is separate;
   procedure Put
      (File                        : in Ada.Text_IO.File_Type;
       Item                        : in Mass_Type;
       Single_Line_Record          : in Boolean := True;
       Named_Association_Record    : in Boolean := False;
       Single_Line_Component       : in Boolean := True;
       Named_Association_Component : in Boolean := False)
   renames Put_Mass;

   procedure Put
      (Item                        : in Mass_Type;
       Single_Line_Record          : in Boolean := True;
       Named_Association_Record    : in Boolean := False;
       Single_Line_Component       : in Boolean := True;
       Named_Association_Component : in Boolean := False)
   is
   begin
      Put (Current_Output, Item, Single_Line_Record, Named_Association_Record,
           Single_Line_Component, Named_Association_Component);
   end Put;

   procedure Put_Item
      (File                        : in Ada.Text_IO.File_Type;
       Item                        : in Mass_Type;
       Single_Line                 : in Boolean := False;
       Named_Association           : in Boolean := False)
   is
   begin
      Put (File, Item, Single_Line, Named_Association,
           Single_Line, Named_Association);
   end Put_Item;

   procedure Get_Mass
      (File                        : in     Ada.Text_IO.File_Type;
       Item                        :    out Mass_Type;
       Named_Association_Record    : in     Boolean := False;
       Named_Association_Component : in     Boolean := False)
   is separate;
   procedure Get
      (File                        : in     Ada.Text_IO.File_Type;
       Item                        :    out Mass_Type;
       Named_Association_Record    : in     Boolean := False;
       Named_Association_Component : in     Boolean := False)
   renames Get_Mass;
   procedure Get
      (Item                        :    out Mass_Type;
       Named_Association_Record    : in     Boolean := False;
       Named_Association_Component : in     Boolean := False)
   is begin
      Get (Current_Input, Item, Named_Association_Record, Named_Association_Component);
   end Get;

   procedure Get_Item
      (File              : in     Ada.Text_IO.File_Type;
       Item              :    out Mass_Type;
       Named_Association : in     Boolean := False)
   is begin
      Get (File, Item, Named_Association, Named_Association);
   end Get_Item;

   procedure Put
      (File                        : in Ada.Text_IO.File_Type;
       Item                        : in CM_Mass_Type;
       Single_Line_Record          : in Boolean := True;
       Named_Association_Record    : in Boolean := False;
       Single_Line_Component       : in Boolean := True;
       Named_Association_Component : in Boolean := False)
   is
   begin
      Put (File, "(");
      if Named_Association_Record then
         Put (File, "Total => ");
         if not Single_Line_Component then New_Line (File); end if;
      end if;
      Math_Text_IO.Put (File, Item.Total);
      Put (File, ','); if not Single_Line_Record then New_Line (File); end if;
      Put (File, ' ');
      if Named_Association_Record then
         Put (File, "Center_Inertia => ");
         if not Single_Line_Component then New_Line (File); end if;
      end if;
      Math_DOF_3_Text_IO.Put_Item (File, Item.Center_Inertia,
         Single_Line => Single_Line_Component, Named_Association => Named_Association_Component);
      Put (File, ")");
   end Put;

   procedure Put
      (Item                        : in CM_Mass_Type;
       Single_Line_Record          : in Boolean := True;
       Named_Association_Record    : in Boolean := False;
       Single_Line_Component       : in Boolean := True;
       Named_Association_Component : in Boolean := False)
   is
   begin
      Put (Current_Output, Item, Single_Line_Record, Named_Association_Record,
           Single_Line_Component, Named_Association_Component);
   end Put;

   procedure Put_Item
      (File                        : in Ada.Text_IO.File_Type;
       Item                        : in CM_Mass_Type;
       Single_Line                 : in Boolean := False;
       Named_Association           : in Boolean := False)
   is
   begin
      Put (File, Item, Single_Line, Named_Association,
           Single_Line, Named_Association);
   end Put_Item;

   procedure Get
      (File                        : in     Ada.Text_IO.File_Type;
       Item                        :    out CM_Mass_Type;
       Named_Association_Record    : in     Boolean := False;
       Named_Association_Component : in     Boolean := False)
   is
      Temp_Item : CM_Mass_Type renames Item;
   begin
      Check (File, "(");
      if Named_Association_Record then Check (File, "Total => "); end if;
      Math_Text_IO.
      Get (File, Temp_Item.Total);
      Check (File, ",");
      Skip_Whitespace (File);
      if Named_Association_Record then Check (File, "Center_Inertia => "); end if;
      Math_DOF_3_Text_IO.
      Get_Item (File, Temp_Item.Center_Inertia,
         Named_Association => Named_Association_Component);
      Check (File, ")");
   end Get;

   procedure Get
      (Item                        :    out CM_Mass_Type;
       Named_Association_Record    : in     Boolean := False;
       Named_Association_Component : in     Boolean := False)
   is begin
      Get (Current_Input, Item, Named_Association_Record, Named_Association_Component);
   end Get;

   procedure Get_Item
      (File              : in     Ada.Text_IO.File_Type;
       Item              :    out CM_Mass_Type;
       Named_Association : in     Boolean := False)
   is begin
      Get (File, Item, Named_Association, Named_Association);
   end Get_Item;

   procedure Put
      (File                        : in Ada.Text_IO.File_Type;
       Item                        : in CM_Inverse_Mass_Type;
       Single_Line_Record          : in Boolean := True;
       Named_Association_Record    : in Boolean := False;
       Single_Line_Component       : in Boolean := True;
       Named_Association_Component : in Boolean := False)
   is
   begin
      Put (File, "(");
      if Named_Association_Record then
         Put (File, "Inverse_Total => ");
         if not Single_Line_Component then New_Line (File); end if;
      end if;
      Math_Text_IO.Put (File, Item.Inverse_Total);
      Put (File, ','); if not Single_Line_Record then New_Line (File); end if;
      Put (File, ' ');
      if Named_Association_Record then
         Put (File, "Inverse_Center_Inertia => ");
         if not Single_Line_Component then New_Line (File); end if;
      end if;
      Math_DOF_3_Text_IO.Put_Item (File, Item.Inverse_Center_Inertia,
         Single_Line => Single_Line_Component, Named_Association => Named_Association_Component);
      Put (File, ")");
   end Put;

   procedure Put
      (Item                        : in CM_Inverse_Mass_Type;
       Single_Line_Record          : in Boolean := True;
       Named_Association_Record    : in Boolean := False;
       Single_Line_Component       : in Boolean := True;
       Named_Association_Component : in Boolean := False)
   is
   begin
      Put (Current_Output, Item, Single_Line_Record, Named_Association_Record,
           Single_Line_Component, Named_Association_Component);
   end Put;

   procedure Put_Item
      (File                        : in Ada.Text_IO.File_Type;
       Item                        : in CM_Inverse_Mass_Type;
       Single_Line                 : in Boolean := False;
       Named_Association           : in Boolean := False)
   is
   begin
      Put (File, Item, Single_Line, Named_Association,
           Single_Line, Named_Association);
   end Put_Item;

   procedure Get
      (File                        : in     Ada.Text_IO.File_Type;
       Item                        :    out CM_Inverse_Mass_Type;
       Named_Association_Record    : in     Boolean := False;
       Named_Association_Component : in     Boolean := False)
   is
      Temp_Item : CM_Inverse_Mass_Type renames Item;
   begin
      Check (File, "(");
      if Named_Association_Record then Check (File, "Inverse_Total => "); end if;
      Math_Text_IO.
      Get (File, Temp_Item.Inverse_Total);
      Check (File, ",");
      Skip_Whitespace (File);
      if Named_Association_Record then Check (File, "Inverse_Center_Inertia => "); end if;
      Math_DOF_3_Text_IO.
      Get_Item (File, Temp_Item.Inverse_Center_Inertia,
         Named_Association => Named_Association_Component);
      Check (File, ")");
   end Get;

   procedure Get
      (Item                        :    out CM_Inverse_Mass_Type;
       Named_Association_Record    : in     Boolean := False;
       Named_Association_Component : in     Boolean := False)
   is begin
      Get (Current_Input, Item, Named_Association_Record, Named_Association_Component);
   end Get;

   procedure Get_Item
      (File              : in     Ada.Text_IO.File_Type;
       Item              :    out CM_Inverse_Mass_Type;
       Named_Association : in     Boolean := False)
   is begin
      Get (File, Item, Named_Association, Named_Association);
   end Get_Item;

end SAL.Gen_Math.Gen_DOF_6.Gen_Text_IO;
