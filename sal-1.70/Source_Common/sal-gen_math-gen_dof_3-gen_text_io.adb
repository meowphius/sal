--  Abstract :
--
--  See spec. This file is auto-generated by auto_text_io
--  from SAL.Gen_Math.Gen_DOF_3
--
with SAL.Text_IO_Utils; use SAL.Text_IO_Utils;
package body SAL.Gen_Math.Gen_DOF_3.Gen_Text_IO is

   use Ada.Text_IO;

   package Unit_Vector_Text_IO is new SAL.Gen_Array_Text_IO.Float_1D
      (Element_Type             => Real_Type,
       Index_Type               => Cart_Axis_Type,
       Index_Array_Element_Type => Unit_Vector_Type,
       Element_Put              => Math_Text_IO.Put,
       Element_Get              => Math_Text_IO.Get);
   procedure Put
      (File                        : in Ada.Text_IO.File_Type;
       Item                        : in Unit_Vector_Type;
       Single_Line_Record          : in Boolean := True;
       Named_Association_Record    : in Boolean := False;
       Single_Line_Component       : in Boolean := True;
       Named_Association_Component : in Boolean := False)
   is
      pragma Unreferenced (Single_Line_Component);
      pragma Unreferenced (Named_Association_Component);
   begin
      Unit_Vector_Text_IO.Put
       (File, Item,
       Single_Line => Single_Line_Record, Named_Association => Named_Association_Record);
   end Put;

   procedure Put
      (Item                        : in Unit_Vector_Type;
       Single_Line_Record          : in Boolean := True;
       Named_Association_Record    : in Boolean := False;
       Single_Line_Component       : in Boolean := True;
       Named_Association_Component : in Boolean := False)
   is
      pragma Unreferenced (Single_Line_Component);
      pragma Unreferenced (Named_Association_Component);
   begin
      Unit_Vector_Text_IO.Put (Current_Output, Item,
       Single_Line => Single_Line_Record, Named_Association => Named_Association_Record);
   end Put;

   procedure Put_Item
      (File              : in Ada.Text_IO.File_Type;
       Item              : in Unit_Vector_Type;
       Single_Line       : in Boolean := False;
       Named_Association : in Boolean := False)
   is begin
      Unit_Vector_Text_IO.Put_Item (File, Item, Single_Line, Named_Association);
   end Put_Item;

   procedure Get
      (File                        : in Ada.Text_IO.File_Type;
       Item                        :    out Unit_Vector_Type;
       Named_Association_Record    : in     Boolean := False;
       Named_Association_Component : in     Boolean := False)
   is
      pragma Unreferenced (Named_Association_Component);
   begin
      Unit_Vector_Text_IO.Get
       (File, Item,
       Named_Association => Named_Association_Record);
   end Get;

   procedure Get
      (Item                        :    out Unit_Vector_Type;
       Named_Association_Record    : in     Boolean := False;
       Named_Association_Component : in     Boolean := False)
   is
      pragma Unreferenced (Named_Association_Component);
   begin
      Unit_Vector_Text_IO.Get (Current_Input, Item,
       Named_Association => Named_Association_Record);
   end Get;

   procedure Get_Item
      (File              : in     Ada.Text_IO.File_Type;
       Item              :    out Unit_Vector_Type;
       Named_Association : in     Boolean := False)
   is begin
      Unit_Vector_Text_IO.Get_Item (File, Item, Named_Association);
   end Get_Item;

   procedure Put
      (File                        : in Ada.Text_IO.File_Type;
       Item                        : in Mag_Axis_Type;
       Single_Line_Record          : in Boolean := True;
       Named_Association_Record    : in Boolean := False;
       Single_Line_Component       : in Boolean := True;
       Named_Association_Component : in Boolean := False)
   is
   begin
      Put (File, "(");
      if Named_Association_Record then
         Put (File, "Mag => ");
         if not Single_Line_Component then New_Line (File); end if;
      end if;
      Math_Text_IO.Put (File, Item.Mag);
      Put (File, ','); if not Single_Line_Record then New_Line (File); end if;
      Put (File, ' ');
      if Named_Association_Record then
         Put (File, "Axis => ");
         if not Single_Line_Component then New_Line (File); end if;
      end if;
      Put_Item (File, Item.Axis,
         Single_Line => Single_Line_Component, Named_Association => Named_Association_Component);
      Put (File, ")");
   end Put;

   procedure Put
      (Item                        : in Mag_Axis_Type;
       Single_Line_Record          : in Boolean := True;
       Named_Association_Record    : in Boolean := False;
       Single_Line_Component       : in Boolean := True;
       Named_Association_Component : in Boolean := False)
   is
   begin
      Put (Current_Output, Item, Single_Line_Record, Named_Association_Record,
           Single_Line_Component, Named_Association_Component);
   end Put;

   procedure Put_Item
      (File                        : in Ada.Text_IO.File_Type;
       Item                        : in Mag_Axis_Type;
       Single_Line                 : in Boolean := False;
       Named_Association           : in Boolean := False)
   is
   begin
      Put (File, Item, Single_Line, Named_Association,
           Single_Line, Named_Association);
   end Put_Item;

   procedure Get
      (File                        : in     Ada.Text_IO.File_Type;
       Item                        :    out Mag_Axis_Type;
       Named_Association_Record    : in     Boolean := False;
       Named_Association_Component : in     Boolean := False)
   is
      Temp_Item : Mag_Axis_Type renames Item;
   begin
      Check (File, "(");
      if Named_Association_Record then Check (File, "Mag => "); end if;
      Math_Text_IO.
      Get (File, Temp_Item.Mag);
      Check (File, ",");
      Skip_Whitespace (File);
      if Named_Association_Record then Check (File, "Axis => "); end if;
      Get_Item (File, Temp_Item.Axis,
         Named_Association => Named_Association_Component);
      Check (File, ")");
   end Get;

   procedure Get
      (Item                        :    out Mag_Axis_Type;
       Named_Association_Record    : in     Boolean := False;
       Named_Association_Component : in     Boolean := False)
   is begin
      Get (Current_Input, Item, Named_Association_Record, Named_Association_Component);
   end Get;

   procedure Get_Item
      (File              : in     Ada.Text_IO.File_Type;
       Item              :    out Mag_Axis_Type;
       Named_Association : in     Boolean := False)
   is begin
      Get (File, Item, Named_Association, Named_Association);
   end Get_Item;

   procedure Put
      (File                        : in Ada.Text_IO.File_Type;
       Item                        : in Unit_Quaternion_Type;
       Single_Line_Record          : in Boolean := True;
       Named_Association_Record    : in Boolean := False;
       Single_Line_Component       : in Boolean := True;
       Named_Association_Component : in Boolean := False)
   is
      pragma Unreferenced (Named_Association_Component);
   begin
      Put (File, "(");
      if Named_Association_Record then
         Put (File, "X => ");
         if not Single_Line_Component then New_Line (File); end if;
      end if;
      Math_Text_IO.Put (File, Item.X);
      Put (File, ','); if not Single_Line_Record then New_Line (File); end if;
      Put (File, ' ');
      if Named_Association_Record then
         Put (File, "Y => ");
         if not Single_Line_Component then New_Line (File); end if;
      end if;
      Math_Text_IO.Put (File, Item.Y);
      Put (File, ','); if not Single_Line_Record then New_Line (File); end if;
      Put (File, ' ');
      if Named_Association_Record then
         Put (File, "Z => ");
         if not Single_Line_Component then New_Line (File); end if;
      end if;
      Math_Text_IO.Put (File, Item.Z);
      Put (File, ','); if not Single_Line_Record then New_Line (File); end if;
      Put (File, ' ');
      if Named_Association_Record then
         Put (File, "S => ");
         if not Single_Line_Component then New_Line (File); end if;
      end if;
      Math_Text_IO.Put (File, Item.S);
      Put (File, ")");
   end Put;

   procedure Put
      (Item                        : in Unit_Quaternion_Type;
       Single_Line_Record          : in Boolean := True;
       Named_Association_Record    : in Boolean := False;
       Single_Line_Component       : in Boolean := True;
       Named_Association_Component : in Boolean := False)
   is
   begin
      Put (Current_Output, Item, Single_Line_Record, Named_Association_Record,
           Single_Line_Component, Named_Association_Component);
   end Put;

   procedure Put_Item
      (File                        : in Ada.Text_IO.File_Type;
       Item                        : in Unit_Quaternion_Type;
       Single_Line                 : in Boolean := False;
       Named_Association           : in Boolean := False)
   is
   begin
      Put (File, Item, Single_Line, Named_Association,
           Single_Line, Named_Association);
   end Put_Item;

   procedure Get
      (File                        : in     Ada.Text_IO.File_Type;
       Item                        :    out Unit_Quaternion_Type;
       Named_Association_Record    : in     Boolean := False;
       Named_Association_Component : in     Boolean := False)
   is
      pragma Unreferenced (Named_Association_Component);
      Temp_Item : Unit_Quaternion_Type renames Item;
   begin
      Check (File, "(");
      if Named_Association_Record then Check (File, "X => "); end if;
      Math_Text_IO.
      Get (File, Temp_Item.X);
      Check (File, ",");
      Skip_Whitespace (File);
      if Named_Association_Record then Check (File, "Y => "); end if;
      Math_Text_IO.
      Get (File, Temp_Item.Y);
      Check (File, ",");
      Skip_Whitespace (File);
      if Named_Association_Record then Check (File, "Z => "); end if;
      Math_Text_IO.
      Get (File, Temp_Item.Z);
      Check (File, ",");
      Skip_Whitespace (File);
      if Named_Association_Record then Check (File, "S => "); end if;
      Math_Text_IO.
      Get (File, Temp_Item.S);
      Check (File, ")");
   end Get;

   procedure Get
      (Item                        :    out Unit_Quaternion_Type;
       Named_Association_Record    : in     Boolean := False;
       Named_Association_Component : in     Boolean := False)
   is begin
      Get (Current_Input, Item, Named_Association_Record, Named_Association_Component);
   end Get;

   procedure Get_Item
      (File              : in     Ada.Text_IO.File_Type;
       Item              :    out Unit_Quaternion_Type;
       Named_Association : in     Boolean := False)
   is begin
      Get (File, Item, Named_Association, Named_Association);
   end Get_Item;

   procedure Put
      (File                        : in Ada.Text_IO.File_Type;
       Item                        : in ZYX_Euler_Type;
       Single_Line_Record          : in Boolean := True;
       Named_Association_Record    : in Boolean := False;
       Single_Line_Component       : in Boolean := True;
       Named_Association_Component : in Boolean := False)
   is
      pragma Unreferenced (Named_Association_Component);
   begin
      Put (File, "(");
      if Named_Association_Record then
         Put (File, "Theta_Z => ");
         if not Single_Line_Component then New_Line (File); end if;
      end if;
      Math_Text_IO.Put (File, Item.Theta_Z);
      Put (File, ','); if not Single_Line_Record then New_Line (File); end if;
      Put (File, ' ');
      if Named_Association_Record then
         Put (File, "Theta_Y => ");
         if not Single_Line_Component then New_Line (File); end if;
      end if;
      Math_Text_IO.Put (File, Item.Theta_Y);
      Put (File, ','); if not Single_Line_Record then New_Line (File); end if;
      Put (File, ' ');
      if Named_Association_Record then
         Put (File, "Theta_X => ");
         if not Single_Line_Component then New_Line (File); end if;
      end if;
      Math_Text_IO.Put (File, Item.Theta_X);
      Put (File, ")");
   end Put;

   procedure Put
      (Item                        : in ZYX_Euler_Type;
       Single_Line_Record          : in Boolean := True;
       Named_Association_Record    : in Boolean := False;
       Single_Line_Component       : in Boolean := True;
       Named_Association_Component : in Boolean := False)
   is
   begin
      Put (Current_Output, Item, Single_Line_Record, Named_Association_Record,
           Single_Line_Component, Named_Association_Component);
   end Put;

   procedure Put_Item
      (File                        : in Ada.Text_IO.File_Type;
       Item                        : in ZYX_Euler_Type;
       Single_Line                 : in Boolean := False;
       Named_Association           : in Boolean := False)
   is
   begin
      Put (File, Item, Single_Line, Named_Association,
           Single_Line, Named_Association);
   end Put_Item;

   procedure Get
      (File                        : in     Ada.Text_IO.File_Type;
       Item                        :    out ZYX_Euler_Type;
       Named_Association_Record    : in     Boolean := False;
       Named_Association_Component : in     Boolean := False)
   is
      pragma Unreferenced (Named_Association_Component);
      Temp_Item : ZYX_Euler_Type renames Item;
   begin
      Check (File, "(");
      if Named_Association_Record then Check (File, "Theta_Z => "); end if;
      Math_Text_IO.
      Get (File, Temp_Item.Theta_Z);
      Check (File, ",");
      Skip_Whitespace (File);
      if Named_Association_Record then Check (File, "Theta_Y => "); end if;
      Math_Text_IO.
      Get (File, Temp_Item.Theta_Y);
      Check (File, ",");
      Skip_Whitespace (File);
      if Named_Association_Record then Check (File, "Theta_X => "); end if;
      Math_Text_IO.
      Get (File, Temp_Item.Theta_X);
      Check (File, ")");
   end Get;

   procedure Get
      (Item                        :    out ZYX_Euler_Type;
       Named_Association_Record    : in     Boolean := False;
       Named_Association_Component : in     Boolean := False)
   is begin
      Get (Current_Input, Item, Named_Association_Record, Named_Association_Component);
   end Get;

   procedure Get_Item
      (File              : in     Ada.Text_IO.File_Type;
       Item              :    out ZYX_Euler_Type;
       Named_Association : in     Boolean := False)
   is begin
      Get (File, Item, Named_Association, Named_Association);
   end Get_Item;

   procedure Put
      (File                        : in Ada.Text_IO.File_Type;
       Item                        : in Celestial_Coordinate_Type;
       Single_Line_Record          : in Boolean := True;
       Named_Association_Record    : in Boolean := False;
       Single_Line_Component       : in Boolean := True;
       Named_Association_Component : in Boolean := False)
   is
      pragma Unreferenced (Named_Association_Component);
   begin
      Put (File, "(");
      if Named_Association_Record then
         Put (File, "Right_Ascension => ");
         if not Single_Line_Component then New_Line (File); end if;
      end if;
      Math_Text_IO.Put (File, Item.Right_Ascension);
      Put (File, ','); if not Single_Line_Record then New_Line (File); end if;
      Put (File, ' ');
      if Named_Association_Record then
         Put (File, "Declination => ");
         if not Single_Line_Component then New_Line (File); end if;
      end if;
      Math_Text_IO.Put (File, Item.Declination);
      Put (File, ")");
   end Put;

   procedure Put
      (Item                        : in Celestial_Coordinate_Type;
       Single_Line_Record          : in Boolean := True;
       Named_Association_Record    : in Boolean := False;
       Single_Line_Component       : in Boolean := True;
       Named_Association_Component : in Boolean := False)
   is
   begin
      Put (Current_Output, Item, Single_Line_Record, Named_Association_Record,
           Single_Line_Component, Named_Association_Component);
   end Put;

   procedure Put_Item
      (File                        : in Ada.Text_IO.File_Type;
       Item                        : in Celestial_Coordinate_Type;
       Single_Line                 : in Boolean := False;
       Named_Association           : in Boolean := False)
   is
   begin
      Put (File, Item, Single_Line, Named_Association,
           Single_Line, Named_Association);
   end Put_Item;

   procedure Get
      (File                        : in     Ada.Text_IO.File_Type;
       Item                        :    out Celestial_Coordinate_Type;
       Named_Association_Record    : in     Boolean := False;
       Named_Association_Component : in     Boolean := False)
   is
      pragma Unreferenced (Named_Association_Component);
      Temp_Item : Celestial_Coordinate_Type renames Item;
   begin
      Check (File, "(");
      if Named_Association_Record then Check (File, "Right_Ascension => "); end if;
      Math_Text_IO.
      Get (File, Temp_Item.Right_Ascension);
      Check (File, ",");
      Skip_Whitespace (File);
      if Named_Association_Record then Check (File, "Declination => "); end if;
      Math_Text_IO.
      Get (File, Temp_Item.Declination);
      Check (File, ")");
   end Get;

   procedure Get
      (Item                        :    out Celestial_Coordinate_Type;
       Named_Association_Record    : in     Boolean := False;
       Named_Association_Component : in     Boolean := False)
   is begin
      Get (Current_Input, Item, Named_Association_Record, Named_Association_Component);
   end Get;

   procedure Get_Item
      (File              : in     Ada.Text_IO.File_Type;
       Item              :    out Celestial_Coordinate_Type;
       Named_Association : in     Boolean := False)
   is begin
      Get (File, Item, Named_Association, Named_Association);
   end Get_Item;

   procedure Put
      (File                      : in Ada.Text_IO.File_Type;
       Item                      : in Rot_Matrix_Type;
       Single_Line_Array         : in Boolean := False;
       Named_Association_Array   : in Boolean := False;
       Single_Line_Element       : in Boolean := True;
       Named_Association_Element : in Boolean := False)
   is begin
      Put
       (File, Cart_Array_Cart_Vector_Type (Item),
       Single_Line_Array, Named_Association_Array, Single_Line_Element, Named_Association_Element);
   end Put;

   procedure Put
      (Item                      : in Rot_Matrix_Type;
       Single_Line_Array         : in Boolean := False;
       Named_Association_Array   : in Boolean := False;
       Single_Line_Element       : in Boolean := True;
       Named_Association_Element : in Boolean := False)
   is begin
      Put (Current_Output, Item,
           Single_Line_Array, Named_Association_Array, Single_Line_Element, Named_Association_Element);
   end Put;

   procedure Put_Item
      (File              : in Ada.Text_IO.File_Type;
       Item              : in Rot_Matrix_Type;
       Single_Line       : in Boolean := False;
       Named_Association : in Boolean := False)
   is begin
      Put (File, Item, Single_Line, Named_Association, Single_Line, Named_Association);
   end Put_Item;

   procedure Get
      (File                      : in     Ada.Text_IO.File_Type;
       Item                      :    out Rot_Matrix_Type;
       Named_Association_Array   : in     Boolean := False;
       Named_Association_Element : in     Boolean := False)
   is begin
      Get
       (File, Cart_Array_Cart_Vector_Type (Item),
      Named_Association_Array, Named_Association_Element);
   end Get;

   procedure Get
      (Item                      :    out Rot_Matrix_Type;
       Named_Association_Array   : in     Boolean := False;
       Named_Association_Element : in     Boolean := False)
   is begin
      Get (Current_Input, Item, Named_Association_Array, Named_Association_Element);
   end Get;

   procedure Get_Item
      (File              : in     Ada.Text_IO.File_Type;
       Item              :    out Rot_Matrix_Type;
       Named_Association : in     Boolean := False)
   is begin
      Get (File, Item, Named_Association, Named_Association);
   end Get_Item;

end SAL.Gen_Math.Gen_DOF_3.Gen_Text_IO;
