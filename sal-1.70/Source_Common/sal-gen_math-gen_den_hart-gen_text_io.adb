--  Abstract :
--
--  See spec. This file is auto-generated by auto_text_io
--  from SAL.Gen_Math.Gen_Den_Hart
--
with SAL.Text_IO_Utils; use SAL.Text_IO_Utils;
package body SAL.Gen_Math.Gen_Den_Hart.Gen_Text_IO is

   use Ada.Text_IO;

   procedure Put
      (File                        : in Ada.Text_IO.File_Type;
       Item                        : in Den_Hart_Type;
       Single_Line_Record          : in Boolean := True;
       Named_Association_Record    : in Boolean := False;
       Single_Line_Component       : in Boolean := True;
       Named_Association_Component : in Boolean := False)
   is
   begin
      Put (File, "(");
      if Named_Association_Record then
         Put (File, "Class => ");
         if not Single_Line_Component then New_Line (File); end if;
      end if;
      Put (File, Item.Class);
      Put (File, ','); if not Single_Line_Record then New_Line (File); end if;
      Put (File, ' ');
      if Named_Association_Record then
         Put (File, "A => ");
         if not Single_Line_Component then New_Line (File); end if;
      end if;
      Math_Text_IO.Put (File, Item.A);
      Put (File, ','); if not Single_Line_Record then New_Line (File); end if;
      Put (File, ' ');
      if Named_Association_Record then
         Put (File, "Trig_Alpha => ");
         if not Single_Line_Component then New_Line (File); end if;
      end if;
      Math_Scalar_Text_IO.Put_Item (File, Item.Trig_Alpha,
         Single_Line => Single_Line_Component, Named_Association => Named_Association_Component);
      case Item.Class is
      when Revolute =>
         Put (File, ','); if not Single_Line_Record then New_Line (File); end if;
         Put (File, ' ');
         if Named_Association_Record then
            Put (File, "D => ");
            if not Single_Line_Component then New_Line (File); end if;
         end if;
         Math_Text_IO.Put (File, Item.D);
      when Prismatic =>
         Put (File, ','); if not Single_Line_Record then New_Line (File); end if;
         Put (File, ' ');
         if Named_Association_Record then
            Put (File, "Trig_Theta => ");
            if not Single_Line_Component then New_Line (File); end if;
         end if;
         Math_Scalar_Text_IO.Put_Item (File, Item.Trig_Theta,
            Single_Line => Single_Line_Component, Named_Association => Named_Association_Component);
      end case;
      Put (File, ")");
   end Put;

   procedure Put
      (Item                        : in Den_Hart_Type;
       Single_Line_Record          : in Boolean := True;
       Named_Association_Record    : in Boolean := False;
       Single_Line_Component       : in Boolean := True;
       Named_Association_Component : in Boolean := False)
   is
   begin
      Put (Current_Output, Item, Single_Line_Record, Named_Association_Record,
           Single_Line_Component, Named_Association_Component);
   end Put;

   procedure Put_Item
      (File                        : in Ada.Text_IO.File_Type;
       Item                        : in Den_Hart_Type;
       Single_Line                 : in Boolean := False;
       Named_Association           : in Boolean := False)
   is
   begin
      Put (File, Item, Single_Line, Named_Association,
           Single_Line, Named_Association);
   end Put_Item;

   procedure Get
      (File                        : in     Ada.Text_IO.File_Type;
       Item                        :    out Den_Hart_Type;
       Named_Association_Record    : in     Boolean := False;
       Named_Association_Component : in     Boolean := False)
   is
      Class : Joint_Class_Type;
   begin
      Check (File, "(");
      if Named_Association_Record then Check (File, "Class => "); end if;
      Get (File, Class);
      declare
         Temp_Item : Den_Hart_Type
            (Class);
      begin
         Check (File, ",");
         Skip_Whitespace (File);
         if Named_Association_Record then Check (File, "A => "); end if;
         Math_Text_IO.
         Get (File, Temp_Item.A);
         Check (File, ",");
         Skip_Whitespace (File);
         if Named_Association_Record then Check (File, "Trig_Alpha => "); end if;
         Math_Scalar_Text_IO.
         Get_Item (File, Temp_Item.Trig_Alpha,
            Named_Association => Named_Association_Component);
         case Temp_Item.Class is
         when Revolute =>
            Check (File, ",");
            Skip_Whitespace (File);
            if Named_Association_Record then Check (File, "D => "); end if;
            Math_Text_IO.
            Get (File, Temp_Item.D);
         when Prismatic =>
            Check (File, ",");
            Skip_Whitespace (File);
            if Named_Association_Record then Check (File, "Trig_Theta => "); end if;
            Math_Scalar_Text_IO.
            Get_Item (File, Temp_Item.Trig_Theta,
               Named_Association => Named_Association_Component);
         end case;
         Item := Temp_Item;
      end;
      Check (File, ")");
   end Get;

   procedure Get
      (Item                        :    out Den_Hart_Type;
       Named_Association_Record    : in     Boolean := False;
       Named_Association_Component : in     Boolean := False)
   is begin
      Get (Current_Input, Item, Named_Association_Record, Named_Association_Component);
   end Get;

   procedure Get_Item
      (File              : in     Ada.Text_IO.File_Type;
       Item              :    out Den_Hart_Type;
       Named_Association : in     Boolean := False)
   is begin
      Get (File, Item, Named_Association, Named_Association);
   end Get_Item;

end SAL.Gen_Math.Gen_Den_Hart.Gen_Text_IO;
