GCL (GNU Common Lisp)  Version(2.5.0) Thu Jan 30 02:37:51 CST 2003
Licensed under GNU Library General Public License
Contains Enhancements by W. Schelter

Use (help) to get some basic information on how to use GCL.
Maxima 5.9.0 http://maxima.sourceforge.net
Distributed under the GNU Public License. See the file COPYING.
Dedicated to the memory of William Schelter.
This is a development version of Maxima. The function bug_report()
provides bug reporting information.
(C1) 		   BATCH(derive_quat_times_vect_kane.maxima)

batching #pc:/Projects/GDS/sal/main/Doc/derive_quat_times_vect_kane.maxima
(C2) 				  LINEL : 120
(C3) 						       LOAD(vect)
(D3) 			    c:/msys/1.0/maxinstall/share/maxima/5.9.0/share/vector/vect.mac
(C4) 						    EXPANDALL : TRUE
(D4) 							  TRUE
(C5) 						  r : [r_x, r_y, r_z]
(D5) 						    [r_x, r_y, r_z]
(C6) 					       Q : [[Q_x, Q_y, Q_z], Q_s]
(D6) 						 [[Q_x, Q_y, Q_z], Q_s]
(C7) 			     quat_times_vect_kane(Q, r) := 2 (Q  ~ Q  ~ r + Q  Q  ~ r) + r
							       1    1	     2  1
(D7) 			     quat_times_vect_kane(Q, r) := 2 (Q  ~ Q  ~ r + Q  Q  ~ r) + r
							       1    1	     2  1
(C8) 					 qv_kane_1 : quat_times_vect_kane(Q, r)
(D8) [r_x, r_y, r_z] + 2 (Q_s [Q_x, Q_y, Q_z] ~ [r_x, r_y, r_z] + [Q_x, Q_y, Q_z] ~ [Q_x, Q_y, Q_z] ~ [r_x, r_y, r_z])
(C9) 						     VECTORSIMP(%)
						 2      2      2
(D9) [2 (Q_x (Q_z r_z + Q_y r_y + Q_x r_x) - (Q_z  + Q_y  + Q_x ) r_x) + r_x, 

					   2	  2	 2
2 (Q_y (Q_z r_z + Q_y r_y + Q_x r_x) - (Q_z  + Q_y  + Q_x ) r_y) + r_y, 

					   2	  2	 2
2 (Q_z (Q_z r_z + Q_y r_y + Q_x r_x) - (Q_z  + Q_y  + Q_x ) r_z) + r_z] + 2 Q_s [Q_x, Q_y, Q_z] ~ [r_x, r_y, r_z]
(C10) 						       EXPRESS(%)
						  2	 2      2
(D10) [2 (Q_x (Q_z r_z + Q_y r_y + Q_x r_x) - (Q_z  + Q_y  + Q_x ) r_x) + 2 Q_s (Q_y r_z - Q_z r_y) + r_x, 

					   2	  2	 2
2 (Q_y (Q_z r_z + Q_y r_y + Q_x r_x) - (Q_z  + Q_y  + Q_x ) r_y) + 2 Q_s (Q_z r_x - Q_x r_z) + r_y, 

					   2	  2	 2
2 (Q_z (Q_z r_z + Q_y r_y + Q_x r_x) - (Q_z  + Q_y  + Q_x ) r_z) + r_z + 2 Q_s (Q_x r_y - Q_y r_x)]
(C11) 						 qv_kane_2 : EXPAND(%)
									    2		 2
(D11) [2 Q_x Q_z r_z + 2 Q_s Q_y r_z - 2 Q_s Q_z r_y + 2 Q_x Q_y r_y - 2 Q_z  r_x - 2 Q_y  r_x + r_x, 

				     2		  2
2 Q_y Q_z r_z - 2 Q_s Q_x r_z - 2 Q_z  r_y - 2 Q_x  r_y + r_y + 2 Q_s Q_z r_x + 2 Q_x Q_y r_x, 

       2	    2
- 2 Q_y  r_z - 2 Q_x  r_z + r_z + 2 Q_y Q_z r_y + 2 Q_s Q_x r_y + 2 Q_x Q_z r_x - 2 Q_s Q_y r_x]
(C12) quat_times_vect_active(Q, V) := BLOCK(LOCAL(a), a : [(Q )  V  - (Q )  V , (Q )  V  - (Q )  V , 
							     1 2  3     1 3  2	  1 3  1     1 1  3

(Q )  V  - (Q )  V ], EXPAND([2 (- (Q )  a  + (Q )  a  + Q  a ) + V , 2 (- (Q )  a  + (Q )  a  + Q  a ) + V , 
  1 1  2     1 2  1		     1 3  2     1 2  3	  2  1	   1	     1 1  3     1 3  1	  2  2	   2

2 (- (Q )  a  + (Q )  a  + Q  a ) + V ]))
       1 2  1	  1 1  2    2  3     3
(C13) 					 qv_def : quat_times_vect_active(Q, r)
									    2		 2
(D13) [2 Q_x Q_z r_z + 2 Q_s Q_y r_z - 2 Q_s Q_z r_y + 2 Q_x Q_y r_y - 2 Q_z  r_x - 2 Q_y  r_x + r_x, 

				     2		  2
2 Q_y Q_z r_z - 2 Q_s Q_x r_z - 2 Q_z  r_y - 2 Q_x  r_y + r_y + 2 Q_s Q_z r_x + 2 Q_x Q_y r_x, 

       2	    2
- 2 Q_y  r_z - 2 Q_x  r_z + r_z + 2 Q_y Q_z r_y + 2 Q_s Q_x r_y + 2 Q_x Q_z r_x - 2 Q_s Q_y r_x]
(C14) 						 IS(qv_def = qv_kane_2)
(D14) 							  TRUE
(D15) 					   derive_quat_times_vect_kane.maxima
